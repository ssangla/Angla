import { getExampleCalculation, calculateContributionRates, calculateExpenseShares } from './calculations';
import { User, ExpenseCategory } from '@/models/types';

/**
 * Exemple de calcul de partage des dÃ©penses basÃ© sur les revenus
 * Selon le fichier Angla.xlsx fourni
 */

export const demonstrateCalculation = () => {
  console.log('=== EXEMPLE DE CALCUL EXPANSE ===\n');

  // 1. Configuration des utilisateurs avec leurs revenus
  const users: User[] = [
    {
      id: '1',
      name: 'Simon',
      email: 'simon@example.com',
      income: 3000,
      contributionRate: 0
    },
    {
      id: '2',
      name: 'AndrÃ©',
      email: 'andre@example.com',
      income: 1250,
      contributionRate: 0
    }
  ];

  console.log('ðŸ“Š REVENUS DES UTILISATEURS:');
  users.forEach(user => {
    console.log(`${user.name}: ${user.income}â‚¬`);
  });

  // 2. Calcul des taux de contribution
  const contributionSettings = calculateContributionRates(users);
  
  console.log('\nðŸ’° TAUX DE CONTRIBUTION CALCULÃ‰S:');
  contributionSettings.users.forEach(user => {
    console.log(`${user.name}: ${user.contributionRate.toFixed(2)}%`);
  });

  // 3. Exemple de dÃ©pense
  const expense = {
    description: 'Courses Carrefour',
    amount: 150,
    category: ExpenseCategory.COURSES,
    date: new Date('2024-01-15'),
    paidBy: '1', // Simon a payÃ©
    sharedBy: ['1', '2'] // Les deux partagent
  };

  console.log('\nðŸ›’ DÃ‰PENSE EXEMPLE:');
  console.log(`Description: ${expense.description}`);
  console.log(`Montant: ${expense.amount}â‚¬`);
  console.log(`PayÃ© par: ${users.find(u => u.id === expense.paidBy)?.name}`);
  console.log(`PartagÃ© par: ${expense.sharedBy.map(id => users.find(u => u.id === id)?.name).join(', ')}`);

  // 4. Calcul des parts
  const shares = calculateExpenseShares(expense, contributionSettings.users);
  
  console.log('\nðŸ“‹ RÃ‰PARTITION DES PARTS:');
  shares.forEach(share => {
    const userName = users.find(u => u.id === share.userId)?.name;
    console.log(`${userName}: ${share.amount.toFixed(2)}â‚¬ (${share.percentage.toFixed(2)}%)`);
  });

  // 5. Calcul du solde
  const paidByUser = users.find(u => u.id === expense.paidBy);
  const andreShare = shares.find(s => s.userId === '2');
  
  console.log('\nðŸ’³ CALCUL DU SOLDE:');
  console.log(`${paidByUser?.name} a payÃ©: ${expense.amount}â‚¬`);
  console.log(`${paidByUser?.name} doit: ${shares.find(s => s.userId === '1')?.amount.toFixed(2)}â‚¬`);
  console.log(`AndrÃ© doit: ${andreShare?.amount.toFixed(2)}â‚¬`);
  
  const balance = expense.amount - (shares.find(s => s.userId === '1')?.amount || 0);
  console.log(`\nðŸŽ¯ RÃ‰SULTAT: AndrÃ© doit ${balance.toFixed(2)}â‚¬ Ã  Simon`);

  // 6. Utilisation de la fonction d'exemple
  console.log('\nðŸ”§ UTILISATION DE LA FONCTION D\'EXEMPLE:');
  const example = getExampleCalculation();
  console.log(`Total revenus: ${example.totalIncome}â‚¬`);
  console.log(`Part Simon: ${example.simonShare.toFixed(2)}â‚¬`);
  console.log(`Part AndrÃ©: ${example.andreShare.toFixed(2)}â‚¬`);

  console.log('\nâœ… CALCUL TERMINÃ‰ - Expanse ready!');
};

// Exemple d'utilisation avec plusieurs dÃ©penses
export const demonstrateMultipleExpenses = () => {
  console.log('\n=== EXEMPLE AVEC PLUSIEURS DÃ‰PENSES ===\n');

  const users: User[] = [
    { id: '1', name: 'Simon', email: 'simon@example.com', income: 3000, contributionRate: 70.65 },
    { id: '2', name: 'AndrÃ©', email: 'andre@example.com', income: 1250, contributionRate: 29.35 }
  ];

  const expenses = [
    {
      description: 'Courses Carrefour',
      amount: 150,
      paidBy: '1'
    },
    {
      description: 'Restaurant Le Petit Bistrot',
      amount: 85,
      paidBy: '2'
    },
    {
      description: 'Essence',
      amount: 65,
      paidBy: '1'
    }
  ];

  console.log('ðŸ“Š DÃ‰PENSES DU MOIS:');
  expenses.forEach((expense, index) => {
    const paidBy = users.find(u => u.id === expense.paidBy)?.name;
    console.log(`${index + 1}. ${expense.description}: ${expense.amount}â‚¬ (payÃ© par ${paidBy})`);
  });

  // Calcul des parts pour chaque dÃ©pense
  expenses.forEach(expense => {
    const shares = calculateExpenseShares({
      ...expense,
      category: ExpenseCategory.COURSES,
      date: new Date(),
      sharedBy: ['1', '2']
    }, users);

    console.log(`\nðŸ’° ${expense.description}:`);
    shares.forEach(share => {
      const userName = users.find(u => u.id === share.userId)?.name;
      console.log(`  ${userName}: ${share.amount.toFixed(2)}â‚¬`);
    });
  });

  console.log('\nðŸŽ¯ SOLDE FINAL:');
  console.log('Simon doit Ã  AndrÃ©: 24.95â‚¬ (restaurant)');
  console.log('AndrÃ© doit Ã  Simon: 44.02â‚¬ (courses) + 19.08â‚¬ (essence) = 63.10â‚¬');
  console.log('RÃ©sultat: AndrÃ© doit 38.15â‚¬ Ã  Simon');
};

// Export pour utilisation dans l'application
export default {
  demonstrateCalculation,
  demonstrateMultipleExpenses
};